#!/usr/bin/env node

const path = require("node:path");
const fs = require("node:fs/promises");

// Constants
const LESSONS_DIR = "lessons";
const NAVIGATION_DIR = "lessons_navigation";
const README_NAME = "README.md";
const README_HEADER = `<a id="title"></a>\n\n## Lessons:\n`;

// Get absolute path to the project root
const projectRoot = path.join(__dirname, "..");

// Get only folder names in the specified directory
const getFoldersOnly = async (dirPath) => {
  const entries = await fs.readdir(dirPath, { withFileTypes: true });
  return entries
    .filter(entry => entry.isDirectory())
    .map(entry => entry.name);
};

// Extract numeric lesson number from folder name
const getLessonNumber = (folderName) =>
  folderName.replace(/\D+/gu, '').replace(/^0+/, '');

// Extract first level-2 heading (##) from README content
const getH2Heading = (content) => {
  const match = content.match(/^##\s*(.+?)(?:\s*:)?\s*$/m);
  return match ? match[1].trim() : null;
};

// Read content of README.md file
const readReadmeFile = async (filePath) => {
  try {
    return await fs.readFile(filePath, 'utf-8');
  } catch (error) {
    console.error(`Failed to read ${filePath}:`, error.message);
    return null;
  }
};

// Write README content to multiple paths
const writeReadmeToPaths = async (paths, content) => {
  for (const filePath of paths) {
    try {
      await fs.writeFile(filePath, content, 'utf-8');
      console.log(`✅ README.md generated: ${filePath}`);
    } catch (error) {
      console.error(`❌ Failed to write ${filePath}:`, error.message);
    }
  }
};

(async () => {
  const lessonsPath = path.join(projectRoot, LESSONS_DIR);
  const folders = await getFoldersOnly(lessonsPath);

  const lessons = [];

  for (const folder of folders) {
    const readmePath = path.join(lessonsPath, folder, README_NAME);
    const content = await readReadmeFile(readmePath);
    if (!content) continue;

    const title = getH2Heading(content) || "Untitled";
    const number = getLessonNumber(folder);
    lessons.push({ number: parseInt(number), title, folder });
  }

  lessons.sort((a, b) => a.number - b.number);


  const links = lessons.map(
    ({ number, title, folder }) => `- [${number}. ${title}](/${LESSONS_DIR}/${folder}/)`
  );


  const finalReadmeContent = `${README_HEADER}\n${links.join("\n")}\n`;

  const outputPaths = [
    path.join(projectRoot, NAVIGATION_DIR, README_NAME),
    path.join(projectRoot, LESSONS_DIR, README_NAME),
  ];

  await writeReadmeToPaths(outputPaths, finalReadmeContent);
})();
